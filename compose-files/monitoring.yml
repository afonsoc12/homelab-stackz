version: '3.5'

services:

# ==================================================
# Grafana
# ==================================================
    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        user: ${PUID}
        environment:
            - TZ=${TZ}
            - GF_SERVER_ROOT_URL=${MONITORING_GRAFANA_GF_SERVER_ROOT_URL}
            - GF_SERVER_DOMAIN=${MONITORING_GRAFANA_GF_SERVER_ROOT_URL}
            - GF_SERVER_SERVE_FROM_SUB_PATH=true
        volumes:
            - ${APPDATA_PATH}/grafana:/var/lib/grafana
            - ${APPDATA_PATH}/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
        ports:
            - 3000:3000
        networks:
            - monitoring
            - monitoring-overlay
            - reverse-proxy
        restart: ${RESTART_POLICY}

# ==================================================
# Loki
# ==================================================
    loki:
        image: grafana/loki:latest
        container_name: loki
        # user: ${PUID}
        environment:
            - TZ=${TZ}
        volumes:
            - ${APPDATA_PATH}/loki:/mnt/config
        # ports:
        #     - 3100:3100
        command:
            - -config.file=/mnt/config/loki-config.yml
        networks:
            - monitoring
        restart: ${RESTART_POLICY}

# ==================================================
# Promtail
# ==================================================
    promtail:
        image: grafana/promtail:latest
        container_name: promtail
        # user: ${PUID}
        environment:
            - TZ=${TZ}
        volumes:
            - ${APPDATA_PATH}/promtail:/mnt/config
            - /var/log:/var/log:ro
            - /var/lib/docker/containers:/var/lib/docker/containers:ro
        command:
            - -config.file=/mnt/config/promtail-config.yml
        networks:
            - monitoring
        restart: ${RESTART_POLICY}

# ==================================================
# InfluxDB
# ==================================================
    influxdb:
        image: influxdb:1.8.4
        container_name: influxdb
        healthcheck: # Allow influx to start before telegraf
            test: ["CMD", "curl", "-f", "http://influxdb:8086/health"]
            interval: 10s
            timeout: 10s
            retries: 5
            start_period: 5s
        environment:
            - TZ=${TZ}
        volumes:
            - ${APPDATA_PATH}/influxdb:/var/lib/influxdb
        ports:
            - 8086:8086
        networks:
            - monitoring
        restart: ${RESTART_POLICY}

# ==================================================
# Telegraf
# ==================================================
    telegraf:
        image: afonsoc12/telegraf:latest
        container_name: telegraf
        hostname: ${HOSTNAME}
        user: telegraf:${DOCKER_GID}
        depends_on:
            influxdb:
                condition: service_healthy
        environment:
            - TZ=${TZ}
            - HOST_ETC=/hostfs/etc
            - HOST_PROC=/hostfs/proc
            - HOST_SYS=/hostfs/sys
            - HOST_VAR=/hostfs/var
            - HOST_RUN=/hostfs/run
            - HOST_MOUNT_PREFIX=/hostfs
        volumes:
            - ${APPDATA_PATH}/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
            - /:/hostfs:ro
        networks:
            - monitoring
        restart: ${RESTART_POLICY}

# ==================================================
# Prometheus
# ==================================================
    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        environment:
            - TZ=${TZ}
        volumes:
            - ${APPDATA_PATH}/prometheus:/prometheus
        ports:
            - 9090:9090
        command:
            - --config.file=/prometheus/prometheus.yml
            - --web.enable-admin-api
        networks:
            - monitoring
            - reverse-proxy
        restart: ${RESTART_POLICY}

# ==================================================
# Blackbox Exporter
# ==================================================
    blackbox-exporter:
        image: prom/blackbox-exporter:latest
        container_name: blackbox-exporter
        depends_on:
            - prometheus
        environment:
            - TZ=${TZ}
        volumes:
            - ${APPDATA_PATH}/blackbox-exporter:/config
        ports:
            - 9115:9115
        networks:
            - monitoring
        command: "--config.file=/config/blackbox.yml"
        restart: ${RESTART_POLICY}

# ==================================================
# Intrusion-monitor
# ==================================================
    intrusion-monitor:
        image: afonsoc12/intrusion-monitor:latest
        container_name: intrusion-monitor
        depends_on:
            influxdb:
                condition: service_healthy
        environment:
            - TZ=${TZ}
            - API_KEY=${MONITORING_INTRUSION_MONITOR_API_KEY}
            - INFLUXDB_HOST=${MONITORING_INTRUSION_MONITOR_INFLUXDB_HOST}
            - INFLUXDB_DATABASE=${MONITORING_INTRUSION_MONITOR_INFLUXDB_DATABASE}
            - INFLUXDB_PORT=${MONITORING_INTRUSION_MONITOR_INFLUXDB_PORT}
            - INFLUXDB_USER=${MONITORING_INTRUSION_MONITOR_INFLUXDB_USER}
            - INFLUXDB_PASSWORD=${MONITORING_INTRUSION_MONITOR_INFLUXDB_PASSWORD}
            - OPERATION_MODE=${MONITORING_INTRUSION_MONITOR_OPERATION_MODE}
            #- SSH_LOG_PATH=
            #- LOG_LEVEL=debug
        volumes:
            - /var/log/ssh-intrusion.log:/watchdog/log/auth.log:ro
        ports:
            - 7007:7007
        networks:
            - monitoring
        restart: ${RESTART_POLICY}

# ==================================================
# Uptime Kuma
# ==================================================
    uptime-kuma:
        image: louislam/uptime-kuma:latest
        container_name: uptime-kuma
        environment:
            - TZ=${TZ}
        volumes:
            - ${APPDATA_PATH}/uptime-kuma:/app/data
        ports:
            - 3001:3001
        networks:
            - monitoring
            - reverse-proxy
        restart: ${RESTART_POLICY}

# ==================================================
# Organizr
# ==================================================
    organizr:
        image: organizr/organizr:latest
        container_name: organizr
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - fpm=true #"false" `#optional`
            #- branch="v2-master" `#optional`
        volumes:
            - ${APPDATA_PATH}/organizr:/config
        ports:
            - 3030:80
        networks:
            - reverse-proxy
        restart: ${RESTART_POLICY}

# ==================================================
# Heimdall
# ==================================================
    # heimdall:
    #     image: linuxserver/heimdall:latest
    #     container_name: heimdall
    #     environment:
    #         - PUID=${PUID}
    #         - PGID=${PGID}
    #         - TZ=${TZ}
    #     volumes:
    #         - ${APPDATA_PATH}/heimdall:/config
    #     ports:
    #         - 3060:80
    #         - 3070:443
    #     networks:
    #         - reverse-proxy
    #     restart: ${RESTART_POLICY}

# ==================================================
# Homer
# ==================================================
    # homer:
    #     image: b4bz/homer:latest
    #     container_name: homer
    #     environment:
    #         - UID=${PUID}
    #         - GID=${PGID}
    #         - TZ=${TZ}
    #     volumes:
    #         - ${APPDATA_PATH}/homer:/www/assets
    #     ports:
    #         - 8777:8080
    #     networks:
    #         - reverse-proxy
    #     restart: ${RESTART_POLICY}

networks:
    monitoring:
        external: true
    monitoring-overlay:
        external: true
    reverse-proxy:
        external: true
