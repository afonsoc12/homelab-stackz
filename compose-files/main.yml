version: '3'

services:

# ==================================================
# Portainer
# ==================================================
    portainer:
        image: portainer/portainer-ce:latest
        container_name: portainer
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ${APPDATA_PATH}/portainer:/data
        ports:
            - 9000:9000
            - 8000:8000
        networks:
            - reverse-proxy
            - portainer-overlay
        restart: ${RESTART_POLICY}

# ==================================================
# Pihole
# ==================================================
    pihole:
        image: pihole/pihole:latest
        container_name: pihole
        hostname: pihole
        cap_add:
            - NET_ADMIN
        environment:
            - TZ=${TZ}
            - WEBPASSWORD=${MAIN_PIHOLE_WEBPASSWORD}
            - WEB_PORT=${MAIN_PIHOLE_WEB_PORT}
            # - DNSSEC=true
        volumes:
            - ${APPDATA_PATH}/pihole/config:/etc/pihole
            - ${APPDATA_PATH}/pihole/dns:/etc/dnsmasq.d
        # ports:
            # - 53:53/tcp
            # - 53:53/udp
            # - 67:67/udp
            # - 8888:80/tcp
            # - 8843:443/tcp
        network_mode: host
        # networks:
            # - reverse-proxy
        #networks:
        #    pihole-macvlan:
        #       ipv4_address: 192.168.0.2
        restart: ${RESTART_POLICY}

# ==================================================
# Wireguard
# ==================================================
    wireguard:
        image: linuxserver/wireguard:latest
        container_name: wireguard
        cap_add:
            - NET_ADMIN
            - SYS_MODULE
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
            - SERVERURL=${MAIN_WIREGUARD_SERVER_URL}
            - SERVERPORT=${MAIN_WIREGUARD_SERVERPORT}
            - PEERS=${MAIN_WIREGUARD_PEERS}
            - PEERDNS=${MAIN_WIREGUARD_PEERDNS} #optional
            - INTERNAL_SUBNET=10.13.13.0 #optional
            - ALLOWEDIPS=0.0.0.0/0 #optional
        volumes:
            - ${APPDATA_PATH}/wireguard:/config
            - /lib/modules:/lib/modules
        ports:
            - ${MAIN_WIREGUARD_SERVERPORT}:${MAIN_WIREGUARD_SERVERPORT}/udp
        sysctls:
            - net.ipv4.conf.all.src_valid_mark=1
        network_mode: bridge
        restart: ${RESTART_POLICY}

# ==================================================
# ZeroTier
# ==================================================
    zerotier:
        image: zerotier/zerotier:latest-arm64
        container_name: zerotier
        cap_add:
            - NET_ADMIN
        environment:
            - TZ=${TZ}
        devices:
            - /dev/net/tun
       # ports:
        #    - ${MAIN_WIREGUARD_SERVERPORT}:${MAIN_WIREGUARD_SERVERPORT}/udp
        network_mode: bridge
        restart: ${RESTART_POLICY}

# ==================================================
# Cloudflared
# ==================================================
    # First run
    # mkdir /opt/docker/cloudflared
    # sudo chmod 777 -R /opt/docker/cloudflared
    # sudo chown root:root -R /opt/docker/cloudflared
    # docker run --rm -v /opt/docker/cloudflared:/home/nonroot/.cloudflared cloudflared:latest tunnel login
    # docker run --rm -v /opt/docker/cloudflared:/home/nonroot/.cloudflared cloudflared:latest tunnel create <TUNNEL NAME>
    # sudo chmod 700 /opt/docker/cloudflared
    cloudflared:
        image: afonsoc12/cloudflared:latest
        container_name: cloudflared
        #environment:
         #   - TUNNEL_ORIGIN_CERT=/home/nonroot/.cloudflared/cert.pem
        volumes:
            - /opt/docker/cloudflared:/home/nonroot/.cloudflared
        networks:
            reverse-proxy:
                ipv4_address: 172.21.1.2
        command: "tunnel run ${MAIN_CLOUDFLARED_TUNNEL_ID}"
        restart: ${RESTART_POLICY}

# ==================================================
# Swag
# ==================================================
    swag:
        image: linuxserver/swag:latest
        container_name: swag
        cap_add:
            - net_admin
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
            - URL=${MAIN_SWAG_URL}
            - EXTRA_DOMAINS=${MAIN_SWAG_EXTRA_DOMAINS}
            - SUBDOMAINS=${MAIN_SWAG_SUBDOMAINS}
            - VALIDATION=${MAIN_SWAG_VALIDATION}
            - DNSPLUGIN=${MAIN_SWAG_DNSPLUGIN}
            - DHLEVEL=2048
            - ONLY_SUBDOMAINS=${MAIN_SWAG_ONLYSUBDOMAINS}
        volumes:
            - ${APPDATA_PATH}/swag:/config
        ports:
            - 80:80
            - 443:443
        networks:
            - reverse-proxy
            - reverse-proxy-overlay
        restart: ${RESTART_POLICY}

# ==================================================
# Authelia
# ==================================================
    authelia:
        image: authelia/authelia:latest
        container_name: authelia
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
        volumes:
            - ${APPDATA_PATH}/authelia:/config
        networks:
            - authelia
            - reverse-proxy
        depends_on:
            - mariadb-authelia
        restart: ${RESTART_POLICY}

    mariadb-authelia:
        image: linuxserver/mariadb:latest
        container_name: mariadb-authelia
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - TZ=${TZ}
            - MYSQL_ROOT_PASSWORD=${MAIN_MARIADB_AUTHELIA_ROOT_PASSWORD}
        volumes:
            - ${APPDATA_PATH}/mariadb-authelia:/config
        #ports:
        # No need to forward ports to host since this will only be accessed inter containers
        #    - 3306:3306
        networks:
            - authelia
        restart: ${RESTART_POLICY}

    db-backup-authelia:
        image: tiredofit/db-backup:latest
        container_name: db-backup-authelia
        environment:
            - TZ=${TZ}
            - HOSTNAME=${HOSTNAME}
            - DB_TYPE=mariadb
            - DB_HOST=mariadb-authelia
            - DB_NAME=authelia
            - DB_USER=root
            - DB_PASS=${MAIN_MARIADB_AUTHELIA_ROOT_PASSWORD}
            - DB_DUMP_FREQ=1440
            # - DB_DUMP_BEGIN=0000
            - DB_CLEANUP_TIME=129600 # 3 months
            - CHECKSUM=SHA1
            - COMPRESSION=GZ
            - GZ_RSYNCABLE=TRUE
            - CONTAINER_ENABLE_MONITORING=FALSE
        volumes:
            - ${APPDATA_PATH}/mariadb-authelia/db-backup:/backup
            - ${APPDATA_PATH}/db-backup/pre:/assets/scripts/pre
            - ${APPDATA_PATH}/db-backup/post:/assets/scripts/post
        networks:
            - authelia
        restart: ${RESTART_POLICY}

networks:
    # pihole-macvlan:
    #     name: pihole-macvlan
    #     driver: macvlan                       # Use the macvlan network driver
    #     driver_opts:
    #         parent: eth0                    # If open vSwitch is disabled use eth0 (or eth1 +)
    #     ipam:
    #         config:
    #             - subnet: 192.168.0.0/24        # Specify subnet
    #               gateway: 192.168.0.1          # Gateway address
    #               ip_range: 192.168.0.0/27      # Available IP addresses
    #               aux_addresses:
    #                   host: 192.168.0.3

    reverse-proxy:
        name: reverse-proxy
        driver: bridge
        ipam:
            config:
                - subnet: 172.21.0.0/16

    # Must be created before
    reverse-proxy-overlay:
        external: true
        driver: overlay

    authelia:
        name: authelia
        driver: bridge

    portainer-overlay:
        external: true
        driver: overlay
